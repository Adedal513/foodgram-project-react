name: Foodgram workflow

on:
  push:
    branches:
      - master
      - main

jobs:
  run_linter:
    name: Check PEP constraints
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Установка Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.7"
          
      - name: Dependencies install
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
      
      - name: Django tests and flake8
        run: |
          python -m flake8
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: run_linter

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend part to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: backend/
          no-cache: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
      - name: Push frontend part to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: frontend/
          no-cache: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub

    steps:
      - name: Executing SSH commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-frontend:latest
            # sudo docker-compose down -v
            cd infra
            sudo docker-compose stop
            sudo docker-compose rm app
            rm .env
            touch .env
            echo DEBUG=${{ secrets.DEBUG }}
            echo INTERNAL_IPS=${{ secrets.INTERNAL_IPS }}
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .env
            echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .env
            sudo docker-compose up -d
            sudo docker-compose exec app -T python manage.py load_db
            # sudo docker system prune -af
            # sudo docker volume prune -f